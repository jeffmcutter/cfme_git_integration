#!/bin/bash

#set -x

NAME=$(basename $0)

function usage {
  echo "$NAME requires a .cfme file with HOST= and DOMAINS= specified."
  exit 1
}

if [ ! -f .cfme ]
then
  usage
fi

HOST=$(awk -F= '/^HOST/ {print $2}' .cfme)
DOMAINS=$(awk -F= '/^DOMAINS/ {print $2}' .cfme)
USER=$(awk -F= '/^USER/ {print $2}' .cfme)

if [ -z "$HOST" ]
then
  usage
fi

echo
echo "*** working on host $HOST ***"

if [ -z "$DOMAINS" ]
then
  usage
fi

if [ -z "$USER" ]
then
  USER=root
fi

REMOTE_DIR="/tmp/$NAME.$$"

DEST="$USER@$HOST"
SSH="ssh $DEST"

function status {
  echo
  echo "*** $* ***"
}

function verify_local {
  status "ensuring $1 is available locally"
  which $1 > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    status "$1 not found on the local system"
    exit 1
  fi
}

function verify_remote {
  status "ensuring $1 is available on the appliance"
  $SSH "rpm -q $1 > /dev/null 2>&1; if [ \$? -ne 0 ]; then yum -y install $1; exit \$?; fi" || ( status "Unable to install $1" ; exit 1 ) 
}

function verify_rhconsulting_scripts {
  status "ensuring cfme-rhconsulting-scripts are available"
  $SSH "if [ ! -x /usr/bin/miqimport ]; then cd /tmp && git clone https://github.com/rhtconsulting/cfme-rhconsulting-scripts.git && cd cfme-rhconsulting-scripts && make install; exit \$?; fi" || ( status "Unable to install cfme-rhconsulting-scripts" ; exit 1 )
}

function make_dirs {
  status "making working directories"
  $SSH "if [ ! -d $REMOTE_DIR ]; then mkdir -p $REMOTE_DIR; else exit 1; fi"
  for DOMAIN in $DOMAINS
  do
    $SSH "if [ ! -d $REMOTE_DIR/automate/$DOMAIN ]; then mkdir -p $REMOTE_DIR/automate/$DOMAIN; else exit 1; fi"
  done
}

function clean_dirs {
  status "removing working directories" &&
  $SSH rm -rf $REMOTE_DIR || exit 1
}

function pull_dir {
  if [ $(echo $1 | grep '/') ]
  then
    DEST_DIR=$(dirname $1)
  else
    DEST_DIR="."
  fi
  status "pulling dir $1" &&
  if [ -d $1 ]; then rm -rf $1; fi &&
  rsync -av $DEST:$REMOTE_DIR/$1 $DEST_DIR || exit 1
}

function push_dir {
  if [ $(echo $1 | grep '/') ]
  then
    DEST_DIR="$REMOTE_DIR/$(dirname $1)"
  else
    DEST_DIR="$REMOTE_DIR"
  fi
  status "pushing dir $1" &&
  rsync -av $1 $DEST:$DEST_DIR/ || exit 1
}

function dumper_dir {
  if [[ -n "$2" && $1 == "automate" ]]
  then
    DIR="$1/$2"
    WHAT="domain $2"
  else
    DIR=$1
    WHAT=$1
  fi
  MDIR=$1
  status "dumping $WHAT" &&
  $SSH mkdir -p $REMOTE_DIR/$DIR \&\& miqexport $WHAT $REMOTE_DIR/$MDIR &&
  pull_dir $DIR || exit 1
}

function loader_dir {
  if [[ -n "$2" && $1 == "automate" ]]
  then
    DIR="$1/$2"
    WHAT="--overwrite domain $2"
  else
    DIR=$1
    WHAT=$1
  fi
  MDIR=$1
  if [ -d "$DIR" ]
  then
    push_dir $DIR &&
    status "loading $WHAT" &&
    $SSH cd /var/www/miq/vmdb \&\& miqimport $WHAT $REMOTE_DIR/$MDIR || exit 1
  else
   status "$DIR not found, skipping."
  fi
}

function dumper_file {
  status "dumping $1" &&
  $SSH mkdir $REMOTE_DIR/$1 \&\& miqexport $1 $REMOTE_DIR/$1/$1.yml &&
  pull_dir $1 || exit 1
}

function loader_file {
  if [ -f "$1/$1.yml" ]
  then
    status "loading $1" &&
    push_dir $1 &&
    $SSH miqimport $1 $REMOTE_DIR/$1/$1.yml || exit 1
  else
    status "$1 not found, skipping."
  fi
}

#function dump_automate {
#  status "dumping automate" &&
#  $SSH cd /var/www/miq/vmdb \&\& bin/rake evm:automate:backup BACKUP_ZIP_FILE=$REMOTE_DIR/automate.zip OVERWRITE=true &&
#  status "copying automate.zip to ." &&
#  scp $DEST:$REMOTE_DIR/automate.zip automate_$$.zip &&
#  if [ -d automate ]; then rm -rf automate; fi &&
#  mkdir automate &&
#  status "unzipping automate.zip into ./automate" &&
#  unzip -q -d automate -o automate_$$.zip &&
#  status "removing automate.zip" &&
#  rm -f automate_$$.zip || exit 1
#}
#
#function load_automate {
#  if [ -d "automate" ]
#  then
#    cd automate &&
#    status "zipping ./automate" &&
#    zip -q -r ../automate_$$.zip * &&
#    cd - > /dev/null 2>&1 &&
#    status "scp automate.zip to $DEST:$REMOTE_DIR" &&
#    scp automate_$$.zip $DEST:$REMOTE_DIR/automate.zip &&
#    status "remove automate.zip" &&
#    rm -f automate_$$.zip &&
#    status "importing automate.zip" &&
#    $SSH cd /var/www/miq/vmdb \&\& bin/rake evm:automate:restore BACKUP_ZIP_FILE=$REMOTE_DIR/automate.zip || exit 1
#  else
#    status "automate not found, skipping."
#  fi
#}

function dump_automate {
  for DOMAIN in $DOMAINS
  do
    dumper_dir automate $DOMAIN
  done
}

function load_automate {
  for DOMAIN in $DOMAINS
  do
    loader_dir automate $DOMAIN
  done
}

function dump {
  dump_automate &&
  dumper_dir provision_dialogs &&
  dumper_dir service_dialogs &&
  dumper_dir service_catalogs &&
  dumper_dir roles &&
  dumper_file tags &&
  dumper_dir buttons &&
  dumper_dir reports &&
  dumper_dir widgets &&
  dumper_dir alerts &&
  dumper_dir alertsets &&
  dumper_dir policies &&
  dumper_dir orchestration_templates &&
  dumper_dir scanitems &&
  dumper_dir scriptsrc &&
  dumper_dir schedules &&
  dumper_file customization_templates || exit 1
}

function load {
  echo
  echo "Load is dangerous, particularly loading stuff onto an existing VMDB with other stuff in it already."
  echo
  read -p "Are you sure you want to do this? (y/n) " answer
  echo
  case $answer in
    [Yy]* )
      echo "OK, here we go!"
      load_automate &&
      loader_dir provision_dialogs &&
      loader_dir service_dialogs &&
      loader_dir roles &&
      loader_file tags &&
      loader_dir buttons &&
      loader_file customization_templates &&
      loader_dir orchestration_templates &&
      loader_dir policies &&
      loader_dir alerts &&
      loader_dir alertsets &&
      loader_dir widgets &&
      loader_dir reports &&
      loader_dir scanitems &&
      loader_dir scriptsrc &&
      loader_dir schedules &&
      loader_dir service_catalogs || exit 1
      ;;
    * )
      echo "OK, better safe than sorry."
      echo
      exit
      ;;
  esac
}

verify_local rsync
verify_remote rsync || exit 1
verify_remote git || exit 1
#verify_remote rpm-build || exit 1
verify_rhconsulting_scripts || exit 1

if [[ $NAME == "cfme2here" || $NAME == "cfme2git" ]]
then
  make_dirs &&
  dump &&
  clean_dirs || exit 1
elif [[ $NAME == "automate2here" || $NAME == "automate2git" ]]
then
  make_dirs &&
  dump_automate &&
  clean_dirs || exit 1
elif [ $NAME == "here2cfme" ]
then
  make_dirs &&
  load &&
  clean_dirs || exit 1
elif [ $NAME == "automate2cfme" ]
then
  make_dirs &&
  load_automate &&
  clean_dirs || exit 1
fi

if [[ $NAME == 'cfme2git' || $NAME == 'automate2git' ]]
then
  git add -A &&
  git commit -m "Export from $HOST on $(date)" &&
  git push || exit 1
fi
