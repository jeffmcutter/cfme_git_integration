#!/bin/bash

#set -x

NAME=$(basename $0)

function usage {
  echo "$NAME requires a .cfme file with HOST= specified."
  exit 1
}

if [ ! -f .cfme ]
then
  usage
fi

HOST=$(awk -F= '/^HOST/ {print $2}' .cfme)

if [ -z "$HOST" ]
then
  usage
fi

REMOTE_DIR="/tmp/$NAME.$$"

DEST="root@$HOST"
SSH="ssh $DEST"

function status {
  echo
  echo "*** $* ***"
}

function make_dirs {
  status "making working directories"
  $SSH "if [ ! -d $REMOTE_DIR ]; then mkdir -p $REMOTE_DIR; else exit 1; fi"
}

function clean_dirs {
  status "removing working directories" &&
  $SSH rm -rf $REMOTE_DIR || exit 1
}

function pull_dir {
  status "pulling dir $1" &&
  if [ -d $1 ]; then rm -rf $1; fi &&
  rsync -av $DEST:$REMOTE_DIR/$1 . || exit 1
}

function push_dir {
  status "pushing dir $1" &&
  rsync -av $1 $DEST:$REMOTE_DIR/ || exit 1
}

function dumper_dir {
  status "dumping $1" &&
  $SSH mkdir $REMOTE_DIR/$1 \&\& miqexport $1 $REMOTE_DIR/$1 &&
  pull_dir $1 || exit 1
}

function loader_dir {
  push_dir $1 &&
  status "loading $1" &&
  $SSH cd /var/www/miq/vmdb \&\& miqimport $1 $REMOTE_DIR/$1 || exit 1
}

function dumper_file {
  status "dumping $1" &&
  $SSH mkdir $REMOTE_DIR/$1 \&\& miqexport $1 $REMOTE_DIR/$1/$1.yml &&
  pull_dir $1 || exit 1
}

function loader_file {
  status "loading $1" &&
  push_dir $1 &&
  $SSH miqimport $1 $REMOTE_DIR/$1/$1.yml || exit 1
}

function dump_automate {
  status "dumping automate" &&
  $SSH cd /var/www/miq/vmdb \&\& bin/rake evm:automate:backup BACKUP_ZIP_FILE=$REMOTE_DIR/automate.zip OVERWRITE=true &&
  status "copying automate.zip to ." &&
  scp $DEST:$REMOTE_DIR/automate.zip automate_$$.zip &&
  if [ -d automate ]; then rm -rf automate; fi &&
  mkdir automate &&
  status "unzipping automate.zip into ./automate" &&
  unzip -q -d automate -o automate_$$.zip &&
  status "removing automate.zip" &&
  rm -f automate_$$.zip || exit 1
}

function load_automate {
  cd automate &&
  status "zipping ./automate" &&
  zip -q -r ../automate_$$.zip * &&
  cd - > /dev/null 2>&1 &&
  status "scp automate.zip to $DEST:$REMOTE_DIR" &&
  scp automate_$$.zip $DEST:$REMOTE_DIR/automate.zip &&
  status "remove automate.zip" &&
  rm -f automate_$$.zip &&
  status "importing automate.zip" &&
  $SSH cd /var/www/miq/vmdb \&\& bin/rails runner bin/rake evm:automate:restore BACKUP_ZIP_FILE=$REMOTE_DIR/automate.zip || exit 1
}

function dump {
  dump_automate &&
  dumper_dir provision_dialogs &&
  dumper_dir service_dialogs &&
  dumper_dir service_catalogs &&
  dumper_file roles &&
  dumper_file tags &&
  dumper_file buttons &&
  dumper_dir reports &&
  dumper_dir widgets &&
  dumper_dir alerts &&
  dumper_dir alertsets &&
  dumper_dir policies &&
  dumper_file customization_templates || exit 1
}

function load {
  #load_automate &&
  #loader_file roles &&
  #loader_file tags &&
  #loader_dir reports &&
  #loader_dir policies &&
  #loader_dir service_dialogs &&
  #loader_file buttons &&
  #loader_dir service_catalogs &&
  #loader_file customization_templates || exit 1
  echo "load is dangerous do it manually"
}

if [ $NAME == "cfme2here" ]
then
  make_dirs &&
  dump &&
  clean_dirs || exit 1
elif [ $NAME == "automate2here" ]
then
  make_dirs &&
  dump_automate &&
  clean_dirs || exit 1
elif [ $NAME == "here2cfme" ]
then
  make_dirs &&
  load &&
  clean_dirs || exit 1
elif [ $NAME == "automate2cfme" ]
then
  make_dirs &&
  load_automate &&
  clean_dirs || exit 1
fi

